function [ matrix, eigenvalue, determinant ] = getFEMParams(N)
% function returns values:
% matrix - structure of
%   A - local stiffness matrix;
%   C - local mass matrix;
% eigenvalue - structure of
%   G   - eigenvalues of corresponding generalized matrix eigenvalue
%   problem: A(1:N+1, 1:N+1)e=(lambda/2)C(1:N+1, 1:N+1)e;
%   Gov - eigenvalues of corresponding generalized matrix eigenvalue
%   problem: A(2:N  , 2:N  )e=(lambda/2)C(2:N  , 2:N  )e;
%   G12 - eigenvalues of corresponding generalized matrix eigenvalue
%   problem: A(1:N  , 2:N+1)e=(lambda/2)C(1:N  , 2:N+1)e;
%   G01 - eigenvalues of corresponding generalized matrix eigenvalue
%   problem: A(1:N  , 1:N  )e=(lambda/2)C(1:N  , 1:N  )e.
% determinant - structure of
%   determinant values of the corresponding local masss matrices

switch N % for N=1,2,3 exact values (rational) calculated by Wolfram Mathematica
    case 1
        A = [1/2 -1/2; ...
            -1/2  1/2];
        C = [2/3  1/3; ...
            1/3  2/3];
    case 2
        A = [7/6  -4/3  1/6; ...
            -4/3   8/3 -4/3; ...
            1/6  -4/3  7/6];
        C = [4/15  2/15 -1/15; ...
            2/15 16/15 2/15; ...
            -1/15 2/15 4/15];
    case 3
        A = [ 37/20 -189/80   27/40 -13/80; ...
            -189/80   27/5  -297/80  27/40; ...
            27/40 -297/80   27/5 -189/80; ...
            -13/80   27/40 -189/80  37/20];
        C = [16/105  33/280  -3/70  19/840; ...
            33/280  27/35  -27/280 -3/70;  ...
            -3/70  -27/280  27/35  33/280; ...
            19/840  -3/70   33/280 16/105];
    case 4
        A = [985/378,-3424/945,508/315,-736/945,347/1890; ...
            -3424/945,1664/189,-2368/315,2944/945,-736/945; ...
            508/315,-2368/315,248/21,-2368/315,508/315; ...
            -736/945,2944/945,-2368/315,1664/189,-3424/945; ...
            347/1890,-736/945,508/315,-3424/945,985/378];
        C = [292/2835,296/2835,-58/945,8/405,-29/2835; ...
            296/2835,256/405,-128/945,256/2835,8/405; ...
            -58/945,-128/945,208/315,-128/945,-58/945; ...
            8/405,256/2835,-128/945,256/405,296/2835; ...
            -29/2835,8/405,-58/945,296/2835,292/2835];
    case 5
        A = [62197/18144,-378125/72576,115625/36288,-78125/36288,34375/36288,-2059/10368; ...
            -378125/72576,123125/9072,-495625/36288,304375/36288,-41875/10368,34375/36288; ...
            115625/36288,-495625/36288,198125/9072,-45625/2592,304375/36288,-78125/36288; ...
            -78125/36288,304375/36288,-45625/2592,198125/9072,-495625/36288,115625/36288; ...
            34375/36288,-41875/10368,304375/36288,-495625/36288,123125/9072,-378125/72576; ...
            -2059/10368,34375/36288,-78125/36288,115625/36288,-378125/72576,62197/18144];
        C = [1907/24948,24775/266112,-9925/133056,17125/399168,-1525/133056,493/88704; ...
            24775/266112,111625/199584,-24625/133056,2125/14784,-62875/798336,-1525/133056; ...
            -9925/133056,-24625/133056,62375/99792,-13625/66528,2125/14784,17125/399168; ...
            17125/399168,2125/14784,-13625/66528,62375/99792,-24625/133056,-9925/133056; ...
            -1525/133056,-62875/798336,2125/14784,-24625/133056,111625/199584,24775/266112; ...
            493/88704,-1525/133056,17125/399168,-9925/133056,24775/266112,1907/24948];
    otherwise
        [x, w ] = calcGaussianQuadrature(N+1);
        [f, df] = calcFiniteElementValue(x);
        C = NaN * ones(N+1); A = C;
        for i=1:(N+1) % SPEED UP: really, we need only 1/4 of calculated values
            for j=1:(N+1)
                C(i, j) = sum( f(:, i) .*  f(:, j) .* w);
                A(i, j) = sum(df(:, i) .* df(:, j) .* w);
            end
        end
end
matrix.A = A;
matrix.C = C;

%% Calc eigenvalues (and, possibly, determinants)
if nargout >= 2
    [eigenvalue.G   determinant.C  ] = calc_eig(A, C);
    [eigenvalue.Gov determinant.Cov] = calc_eig(A(2:N, 2:N  ), C(2:N, 2:N  ));
    [eigenvalue.G12 determinant.C12] = calc_eig(A(1:N, 2:N+1), C(1:N, 2:N+1));
    [eigenvalue.G01 determinant.C01] = calc_eig(A(1:N, 1:N  ), C(1:N, 1:N  ));
end
end

function [G, C] = calc_eig(A, C)
[~, D] = eig(A, C/2, 'chol');
G = sort(diag(D));
C = det(C);
end